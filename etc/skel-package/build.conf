# Original Author: Matthias S. Benkmann
# Modified by: Robert Taylor
# Build instructions for <PACKAGE>
#
# This file is sourced by the /etc/pkguser/build script.
#
# If you wish to make changes that will automatically be reflected in the
# build.conf file that is placed in every package user's home directory simply
# edit the file /etc/pkgusr/skel-package/build.conf
#
# Note: the ":;" before the "}" in *_commands() is a no-op that makes sure 
# that the function remains syntactically valid, even if you remove its
# contents (e.g. remove the "configure" line, because there's nothing to 
# configure for the package).

# RT: I have additionally configured the build script so that it will simply
# skip any function that is commented out or removed from this build.conf file
# and it will not create any log files for the skipped function.

# RT: ATTENTION!
# Since some packages prefer to be set up in a separate build directory while
# others expect to be built in the package source directory there is a flag
# "use_build_dir" that can be set to 1 to turn on using a separate build
# directory.
#
# The working directory is initialized for each function as follows:
# patch_commands() are run with the extracted package source as the current
#    directory.
# If the flag "use_build_dir" is set to 1 (for yes) then...
# configure_commands(), make_commands(), check_commands(), install_commands(),
#   and post_install_commands() have the current directory set to the created
#   $pkg_owner-build directory. Otherwise they are set to the package source
#   directory.
# unpack_commands(), clean_commands(), finalize_commands() are running with 
#   $HOME as the current directory. Unpack and clean commands are internal to 
#   the build script so you won't see them in this build.conf file.
#
# If you change directory in one function it will not persist to another.
# You can override these defaults for a section easily by running these handy
# functions within the desired section:
# cd_to_build_dir; # outcome of this depends on the value of the use_build_dir
# cd_to_source_dir;
#
# The unpack_commands() function in the build script will automatically extract
# tar archives that match any of the space-separated patterns in the list
# specified by PATTERNS.
#
# RT: The default pattern will work provided the package user you have created 
# for this package build matches part of the archive's name. If the package
# user name would match more than one archive the unpack_commands() function
# will issue a WARNING. You can adjust this pattern to be more specific in the
# PATTERNS variable below. If you wish to extract more than one archive for
# this package specify them in PATTERNS with enough specifics to match only
# one archive file with each pattern. Separate multiple pattern specifications
# with spaces.
# 
# If a package has multiple archives, use patterns that make sure the
# archives are extracted in the correct order, because the archive
# extracted first will be the one in whose directory the patch commands
# will be executed. Example for bash: "bash-3.1.tar doc-3.1.tar"
# 
# RT: The unpack_commands() function will look for archives first in the
# users $HOME and then in the global /sources directory.
#
# RT: If you wish to deliberately pause to review logs before continuing with
# the build use the handy function:
# pause_after_this;
# Place this function call within the sections below to pause after that 
# section has completed. Once you are done "pausing" you can continue by
# issuing "./build" to rerun that section (it will pause again unless you 
# remove the pause_after_this call), or "./build next" to start building again
# with the next section.
# 
# RT: Use the handy variables $HOME, $pkg_source, $build_path, and 
# $sources_path to refer to these paths within your code. $sources_path is 
# mapped to /sources, $pkg_source and $build_path are created and mapped as 
# the package archive is extracted. If you keep patches somewhere besides 
# /patches feel free to adjust the patch_path variable to point there:
#
# RT: By default the build script will disable use of the wrappers for all
# but the install_commands() and post_install_commands(). You can override this
# behavior for any of these functions by running disable_wrappers, or 
# enable_wrappers at the beginning of the function content.
# 
# RT: The wrappers will output warnings for syntax and logic errors found such
# as trying to install a file that does not exist, or trying to remove a file
# that does not exist. If you wish to reduce logging of many of these 
# inconsequential errors you can use the disable_wrapper_warnings; function to 
# disable warnings for the duration of the build script run. Other syntax 
# errors that may be considered more important will still be logged.
disable_wrapper_warnings;
patch_path="/patches";
PATTERNS="$pkg_owner*.tar";
use_build_dir=1; # Set to use a separate build directory

patch_commands()
{ :
  #patch -Np1 -i "$patch_path"/package.patch
}

configure_commands()
{ :
  "$pkg_source"/configure --prefix=/usr
}

make_commands()
{ :
  make
}

check_commands()
{ :
  #pause_after_this;
  #make check
}

install_commands()
{ :
  pause_after_this;
  make install
}

post_install_commands()
{ :
  pause_after_this;
  # Commands in here should be related to install but executed after
  # make install.
}

finalize_commands()
{ :
  # The clean_commands remove the extracted source directory, the build 
  # directory, the build.state file and any files owned by the package in /tmp.
  clean_commands; # same as running ./build clean at the shell prompt
  # Lets save a handy listing of files and directories installed
  echo "Building the "$pkg_owner.lst" file, please wait ...";
  list_package "$pkg_owner" > "$pkg_owner.lst";
  # If you built and configured the c wrapper earlier you can run this here
  echo "Running setup_install_dirs, please wait ...";
  setup_install_dirs;
  # Update the .project file with some data that can be automatically determined
  edit_project_file;
  # The wrapper scripts create numerous text files in the package user's home
  # depending on the errors or issues encountered. You can clean these up if
  # you wish.
  find $HOME -maxdepth 1 -name "*.txt" -exec rm -vf {} \;
}