#!/bin/bash
# Copyright (c) Robert Taylor <rtaylor777 AT gmail DOT com> Sept 2013
# You may do everything with this code except misrepresent its origin.
# PROVIDED 'AS IS' WITH ABSOLUTELY NO WARRANTY OF ANY KIND!
#
DAISY_CHAIN="";
UNLINK_BYPASS="";
me=$(whoami);
reportmsg="ln";
for item in "$@"; do
	regex="^.*['[:space:]].*$";
	if [[ "$item" =~ $regex ]]; then
	    regex="^(.*=)(.*['[:space:]].*)$";
	    if [[ "$item" =~ $regex ]]; then
			reportmsg="$reportmsg ${BASH_REMATCH[1]}\"${BASH_REMATCH[2]}\"";
		else
			reportmsg="$reportmsg \"$item\"";
		fi
	else
		reportmsg="$reportmsg $item";
	fi
done

for p in $(type -ap ln) ; do
  if [ ! $p -ef $0 ]; then DAISY_CHAIN="$p"; break ; fi
done

if [ -z "$DAISY_CHAIN" ]; then
  echo "Cannot find real ${0##*/} command";
  exit 1;
fi

if [ $UID -eq 0 ]; then
  $DAISY_CHAIN "$@";
fi

for p in $(type -ap unlink) ; do
  if [[ "$p" != "/usr/lib/pkgusr/unlink" ]]; then UNLINK_BYPASS="$p"; break ; fi
done

options="";
# In order to preserve whitespace and special characters, "files" is an array
files=();
owner="";
stopgettingoptions=0;
addnext=0;
remnext=0;

dest="";
targetoption=0;
gettarget=0;
destisfile=0;
sourcenum=0;
item="";
lastitem="";
pwd=$(pwd);
pass_error=0;
error_code=0;
audit_text="";

# Because of multi-threading.. multiple line entries need to be done as one
# one write to the log file.
report_errors(){
	text="\n";
	text="$text ------ln command syntax errors-------------\n";
	text="$text $(echo $reportmsg | sed -e 's/%/%%/g')\n";
	text="$text $1\n";
	printf "$text" >>"$HOME/ln_syntax_errors.txt";
}
report_owner_issues(){
	text="\n";
	text="$text ------link ownership issues-------------\n";
	text="$text present working directory is: $(echo \"$pwd\" | sed -e 's/%/%%/g')\n";
	text="$text $1\n";	
	printf "$text" >>"$HOME/ln_owner_issues.txt";
}
ln_audit_log(){
	text="\n";
	text="$text ------ original command -------------\n";
	text="$text $(echo $reportmsg | sed -e 's/%/%%/g')\n";
	text="$text present working directory is: $(echo \"$pwd\" | sed -e 's/%/%%/g')\n";
	text="$text ------ one of the resulting commands actually run -------\n";
	text="$text $1";
	if [[ -n "$audit_text" ]]; then
		text="$text error_code is: $error_code\n";
		text="$text $(echo $audit_text | sed -e 's/%/%%/g')\n";
		printf "$text" >>"$HOME/ln_errors.txt";
	fi
	# while debugging the wrapper you may wish to uncomment the following line
	#printf "$text" >>"$HOME/ln_audit.txt";
}

# Usage: ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
#  or:  ln [OPTION]... TARGET                  (2nd form)
#  or:  ln [OPTION]... TARGET... DIRECTORY     (3rd form)
#  or:  ln [OPTION]... -t DIRECTORY TARGET...  (4th form)
#In the 1st form, create a link to TARGET with the name LINK_NAME.
#In the 2nd form, create a link to TARGET in the current directory.
#In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.

# This for loop manages to process filenames or paths with white space or
# special characters.
for item in "$@"; do
	if [[ $stopgettingoptions -eq 0 ]]; then
		if [[ "$item" = '--' ]]; then
			options="$options $item";
			stopgettingoptions=1;
			continue;
		fi
		# With options, spaces are assumed to delimit the options so we need
		# continuation logic to process options that have been split with spaces.
		if [[ $addnext -eq 1 ]];then
			if [[ "$item" = '=' ]]; then
				options="$options $item";
			else
				addnext=0;
				options="$options $item";
			fi
			continue;
		fi
		if [[ $remnext -eq 1 ]]; then
			if [[ "$item" != '=' ]]; then
				if [[ $gettarget -eq 1 ]]; then
					gettarget=0;
					regex="^=(.*)$";
					if [[ "$item" =~ $regex ]]; then
						dest="${BASH_REMATCH[1]}";
					else
						dest="$item";
					fi
				fi
				remnext=0;
			fi
			continue;
		fi
		# Handle double hyphen options first
		if [[ "$item" = '--help' ]]; then
			ln_audit_log "$DAISY_CHAIN \"--help\"\n";
			$DAISY_CHAIN "--help";
			exit 0;
		fi
		if [[ "$item" = '--version' ]]; then
			ln_audit_log "$DAISY_CHAIN \"--version\"\n";
			$DAISY_CHAIN "--version";
			exit 0;
		fi
		if [[ "$item" = '--no-target-directory' ]]; then
			destisfile=1;
			options="$options $item";
			continue;
		fi
		regex="^--target-directory[=]*(.*)$";
		if [[ "$item" =~ $regex ]]; then
			targetoption=1;
		    if [[ -z "${BASH_REMATCH[1]}" ]]; then
				remnext=1;
				gettarget=1;
		    else
		        dest="${BASH_REMATCH[1]}";
		    fi
			continue;
		fi
		regex="^--backup=(.*)$";
		if [[ "$item" =~ $regex ]]; then
		    if [[ -z "${BASH_REMATCH[1]}" ]]; then
				addnext=1;
			fi
			options="$options $item";
			continue;
		fi
		regex="^--suffix[=]*(.*)$";
		if [[ "$item" =~ $regex ]]; then
		    if [[ -z "${BASH_REMATCH[1]}" ]]; then
				addnext=1;
			fi
			options="$options $item";
			continue;
		fi
		regex="^--.+$";# catch other double hyphen options
		if [[ "$item" =~ $regex ]]; then
			options="$options $item";
			continue;
		fi	
		# these options can be mashed all together mostly
		regex="^-([^-]+)$";# single hyphen option(s)
		if [[ "$item" =~ $regex ]]; then
			mashed="${BASH_REMATCH[1]}";
			out_options="-";
			out_flag=0;
			olength=${#mashed};
			# We need to process these options from left to right
			for (( i=0; i<$olength; i++ )); do
				ochar=${mashed:$i:1};
				case "$ochar" in
					T)  destisfile=1; 
						out_flag=1;# An option we want to keep
						out_options="$out_options$ochar";
						;;
					[bdFfiLnPsv])  out_flag=1;# An option we want to keep
						out_options="$out_options$ochar";
						;;					
					*) 	remainder=$((olength-i));
						mashed=${mashed:$i:$remainder};# get remaining chars
						break;
				esac
			done
			# add these captured options if any
			if [[ $out_flag -eq 1 ]]; then
				options="$options $out_options";				
			fi		
			# The rest of these if I save them at all I want separated out.
			# These options are special since if they were mashed with other
			# options they would have to be at the end of the mess to be valid.	
			regex="^t(.*)$";
			if [[ "$mashed" =~ $regex ]]; then
				targetoption=1;
				if [[ -z "${BASH_REMATCH[1]}" ]]; then
					remnext=1;
					gettarget=1;
				else
					dest="${BASH_REMATCH[1]}";
				fi
				continue;
			fi
			regex="^S(.*)$";
			if [[ "$mashed" =~ $regex ]]; then
				if [[ -z "${BASH_REMATCH[1]}" ]]; then
					addnext=1;
				fi
				options="$options -S${BASH_REMATCH[1]}";
				continue;
			fi
			continue;
		fi
		if [[ -n "$lastitem" ]]; then
			# add $lastitem to files array
			sourcenum=$[$sourcenum+1];
			files+=("$lastitem");
		fi
		lastitem="$item";
	else
		if [[ -n "$lastitem" ]]; then
			# add $lastitem to files array
			sourcenum=$[$sourcenum+1];
			files+=("$lastitem");
		fi
		lastitem="$item";
	fi
done
# The last item will either be the destination or one of the other files or
# directories for the list.
if [[ -n "$lastitem" ]]; then
	if [[ $targetoption -eq 1 ]] || [[ $sourcenum -eq 0 ]]; then
		if [[ $targetoption -eq 1 ]]; then
			# the lastitem is a link name so sourcenum needs to be incremented
			sourcenum=$[$sourcenum+1];
		fi
		files+=("$lastitem");
		if [[ ! -d "$dest" ]] && [[ $targetoption -eq 1 ]]; then
			echo 1>&2 "*** A target directory was indicated however either the destination";
			echo 1>&2 "*** directory does not exist or it is not a directory.";
			echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
			report_errors "The destination directory $(echo \"$dest\" | sed  -e 's/%/%%/g') \n does not exist or it is not a directory.";
			exit 1;
		fi
		if [[ $sourcenum -eq 0 ]]; then
			# only one item was specified and it is assumed to be the target
			# for a link that is to be created in the current directory
			filepart=$(basename "$lastitem");
			dest="$pwd/$filepart";
			destisfile=1;
			real_target=$(readlink -f -- "$lastitem");
			if [[ "$real_target" = "$dest" ]]; then
				# there will be an error due to the link name and the target
				# being the same name and in the same directory
				echo 1>&2 "*** ERROR: the target is in the current directory";
				echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
				error_text="ERROR: the target is in the current directory\n";
				error_text="$error_text and since no linkname was specified there is a\n";
				error_text="$error_text target overwrite condition possible.\n";
				report_errors "$error_text\n";
				exit 1;
			fi
		fi
	else
		dest="$lastitem";
		if [[ $destisfile -eq 1 ]] && [[ -d "$dest" ]]; then
			echo 1>&2 "*** The target \"$dest\" is a directory but is";
			echo 1>&2 "*** supposed to be a LINK_NAME based on options indicated on the command line.";
			echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
			error_text="The target $(echo \"$dest\" | sed  -e 's/%/%%/g') is a directory but is\n";
			error_text="$error_text supposed to be a LINK_NAME based on options indicated on the command line.";
			report_errors "$error_text";
			exit 1;
		fi
		if [[ -f "$dest" ]] || [[ -h "$dest" ]]; then 
		    # sometimes a link is to a directory so we don't want to mistakenly say
		    # it is a file.
			if [[ ! -d "$dest" ]]; then
				destisfile=1; 
			fi
		fi
		if [[ $destisfile -eq 0 ]] && [[ ! -e "$dest" ]]; then 
				# destination does not exist so destination should be a file 
				# or link.
				destisfile=1;
		fi
		if [[ $sourcenum -gt 1 ]] && [[ $destisfile -eq 1 ]]; then
			echo 1>&2 "*** There is more than one TARGET indicated but the";
			echo 1>&2 "*** destination directory does not exist or is not a directory.";
			echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
			error_text="There is more than one TARGET indicated but the destination directory\n";
			error_text="$error_text $(echo \"$dest\" | sed  -e 's/%/%%/g') does not exist or is not a directory.\n";
			report_errors "$error_text";
			exit 1;
		fi
	fi
else
	if [[ $targetoption -eq 1 ]] && [[ "$dest" = "" ]]; then
		echo 1>&2 "*** Missing target-directory option";
		echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
		error_text="A target-directory was indicated but no value was provided for it.\n";
		report_errors "$error_text";
		exit 1;
	fi
	if [[ $targetoption -eq 1 ]] && [[ $sourcenum -eq 0 ]]; then
		echo 1>&2 "*** Missing file operand";
		echo 1>&2 "*** See the \"$HOME/ln_syntax_errors.txt\" file for details";
		error_text="A target-directory was indicated but no TARGET was indicated.\n";
		report_errors "$error_text";
		exit 1;
	fi
fi

error_file=$(mktemp -t ln.XXXXXXXXXX);# temporary file for stderr output

# At this point we have options in the $options variable, TARGETS (files or directories)
# in the $files array, and a destination, either a directory or LINK_NAME stored in $dest.
for file in "${files[@]}"; do
	error_code=0;
	audit_text="";
	if [[ $destisfile -eq 1 ]]; then
		regex="(.*)/([^/]+)$";
		if [[ "$dest" =~ $regex ]]; then 
			if [[ -n "${BASH_REMATCH[1]}" ]]; then
				linkpath=$(readlink -f -- "${BASH_REMATCH[1]}");
			else
				linkpath="";
			fi
			linkname="${BASH_REMATCH[2]}";
		else
			linkpath="$pwd";
			linkname="$dest";
		fi	
		fulllinkname="$linkpath/$linkname";
	else
		linkname=$(basename "$file");
		linkpath=$(readlink -f -- "$dest");
		fulllinkname="$linkpath/$linkname";
	fi
	if [[ -e "$fulllinkname" ]] || [[ -h "$fulllinkname" ]]; then
		owner=$(stat -c%U -- "$fulllinkname");
		if [[ $owner != $me ]]; then
		    echo 1>&2 "*** The file: \"$fulllinkname\" is owned by \"$owner\" and not \"$me\"";
			echo 1>&2 "*** See the \"$HOME/ln_owner_issues.txt\" file for details";
			error_text="The file: $(echo \"$fulllinkname\" | sed  -e 's/%/%%/g') is owned by \"$owner\" and not \"$me\"\n";
			error_text="$error_text$DAISY_CHAIN$options $(echo \"$file\" | sed  -e 's/%/%%/g') $(echo \"$fulllinkname\" | sed  -e 's/%/%%/g')\n";
			report_owner_issues "$error_text";
			echo "$fulllinkname">>"$HOME/ln_owner_file_list.txt";
			continue;# skip this one
		fi
	fi
	
	$DAISY_CHAIN $options "$file" "$fulllinkname" 2>"$error_file" || error_code="$?";
	ERROR=$(<"$error_file");
	if [[ "$error_code" -ne 0 ]]; then
		audit_text="ERROR: $ERROR";
		echo "$ERROR" 1>&2; # output to stdout and stderr
		pass_error="$error_code";
	fi
	ln_audit_log "$DAISY_CHAIN$options $(echo \"$file\" | sed  -e 's/%/%%/g') $(echo \"$fulllinkname\" | sed  -e 's/%/%%/g')\n";
done
$UNLINK_BYPASS "$error_file"; # remove temporary file
exit "$pass_error";